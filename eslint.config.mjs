// @ts-check
import tseslint from 'typescript-eslint';
import eslint from '@eslint/js';
import globals from 'globals';

export default tseslint.config(
  {
    ignores: ['eslint.config.mjs'],
  },
  eslint.configs.recommended,
  ...tseslint.configs.strictTypeChecked,
  ...tseslint.configs.stylisticTypeChecked,
  {
    languageOptions: {
      globals: {
        ...globals.node,
        ...globals.jest,
      },
      ecmaVersion: 5,
      sourceType: 'module',
      parserOptions: {
        projectService: true,
        tsconfigRootDir: import.meta.dirname,
      },
    },
  },
  {
    rules: {
      '@typescript-eslint/no-explicit-any': 'off',
      '@typescript-eslint/no-floating-promises': 'warn',
      '@typescript-eslint/no-unsafe-argument': 'warn',

      'no-unexpected-multiline'     : 'error',
      'curly'                       : 'error',
      'guard-for-in'                : 'error',
      'no-caller'                   : 'error',
      'no-extend-native'            : 'error',
      'no-extra-bind'               : 'error',
      'no-invalid-this'             : 'error',
      'no-multi-spaces'             : ['error', {ignoreEOLComments: true, exceptions: {VariableDeclarator: true, AssignmentExpression: true }}],
      'no-multi-str'                : 'error',
      'no-new-wrappers'             : 'error',
      'no-throw-literal'            : 'error',
      'no-with'                     : 'error',
      'prefer-promise-reject-errors': 'error',
      'no-unused-vars'              : ['error', {args: 'none', 'caughtErrors': 'none'}],
      'array-bracket-newline'       : 'off',
      'array-bracket-spacing'       : ['error', 'never'],
      'block-spacing'               : ['error', 'never'],
      'brace-style'                 : 'error',
      'camelcase'                   : ['error', {properties: 'never'}],
      'comma-dangle'                : ['error', 'always-multiline'],
      'comma-spacing'               : 'error',
      'comma-style'                 : 'error',
      'computed-property-spacing'   : 'error',
      'eol-last'                    : 'error',
      'func-call-spacing'           : 'error',
      'indent'                      : [
        'error', 2, {
          'CallExpression'     : {'arguments': 1},
          'FunctionDeclaration': {'body': 1, 'parameters': 2},
          'FunctionExpression' : {'body': 1, 'parameters': 2},
          'MemberExpression'   : 2,
          'ObjectExpression'   : 1,
          'SwitchCase'         : 1,
          'ignoredNodes'       : ['ConditionalExpression'],
        },
      ],
      'key-spacing'                : ['error', {'align': 'colon'}],
      'keyword-spacing'            : 'error',
      'linebreak-style'            : 'error',
      'max-len'                    : ['error', {code: 120, comments: 120, tabWidth: 2, ignoreUrls: true}],
      'new-cap'                    : ['error', { "capIsNew": false }],
      'no-array-constructor'       : 'error',
      'no-mixed-spaces-and-tabs'   : 'error',
      'no-multiple-empty-lines'    : ['error', {max: 2}],
      'no-new-object'              : 'error',
      'no-tabs'                    : 'error',
      'no-trailing-spaces'         : 'error',
      'object-curly-spacing'       : ['error', 'always'],
      'one-var'                    : ['error', {var: 'never', let: 'never', const: 'never'}],
      'operator-linebreak'         : ['error', 'after', { 'overrides': { '?': 'before', ':': 'before' } }],
      'padded-blocks'              : ['error', 'never'],
      'quote-props'                : ['error', 'consistent'],
      'quotes'                     : ['error', 'single', {allowTemplateLiterals: true}],
      'semi'                       : 'error',
      'semi-spacing'               : 'error',
      'space-before-blocks'        : 'error',
      'space-before-function-paren': ['error', {asyncArrow: 'always', anonymous: 'never', named: 'never'}],
      'spaced-comment'             : ['error', 'always'],
      'switch-colon-spacing'       : 'error',
      'arrow-parens'               : ['error', 'always'],
      'constructor-super'          : 'error',
      'generator-star-spacing'     : ['error', 'after'],
      'no-new-symbol'              : 'error',
      'no-this-before-super'       : 'error',
      'no-var'                     : 'error',
      'prefer-const'               : ['error', {destructuring: 'all'}],
      'prefer-rest-params'         : 'error',
      'prefer-spread'              : 'error',
      'rest-spread-spacing'        : 'error',
      'yield-star-spacing'         : ['error', 'after'],

      '@typescript-eslint/no-unsafe-assignment': 'off',
      '@typescript-eslint/no-extraneous-class' : ['error', {allowStaticOnly: true}],
      '@typescript-eslint/no-unused-vars'      : ['error', {
        caughtErrors: 'all',
        caughtErrorsIgnorePattern: '^_',
        destructuredArrayIgnorePattern: '^_'
      }],
    },
  },
);
